{Miller2018}
we need a model big enough and fast enough to predict structure - uses OPLS-UA
order parameter is used to quantify structural order and is related to the lamellar stacking in p3ht--when systems are small GIXS peaks are fuzzy.
relaxation time and TPS
    these metrics were used to show that advances in hardware wouldn't give us the jump we needed and so we need better models
    still it would be cool to compare
decorrelation times/autocorrelation - used to make sure the the system is equilibrated
Conclusions:
    Can simulate solvent evaporation with slow shrinking
    large volumes are needed for experimental validation

planckton removing hydrogens doesn't adjust the mass of heavy atoms - does this matter?

I found that in order to get agreement with Evan's results I had to change the angle cutoff to be more strict.

GRiTS
uses SMARTS matching to assign atomic indexes to coarse grain beads
bonds between cg beads are inferred based on atomistic bonding scheme
SMARTS matching is expensive so when looking at an entire simulation trajectory a simplification scheme is used
first the first frame of the trajectory is taken
this is because the perceive bond order function in openbabel relies on the atomic positions being chemically reasonable
(aromatic systems should be planar, etc)
freud clustering is used to break apart the first frame into molecules
if molecules have the same number of atoms, they are assumed to have the same chemical structure

Next steps
Evan's work showed that tie-chains are important how does the planckton workflow address the need for polydispersity
Opportunity to cite Chris' polymer builder work!

How have we made this work more TRUE?
T: by using mbuild with foyer in planckton to initialize our simulations, we can easily use different input file formats including smiles strings and any foyer forcefield. Using grits to calculate the order parameter can help us to more easily select the conjugated part of the molecule without any manual indexing.
R: by using the signac framework we can quickly and easily sample the necessary parameter space without needing to manually create or manage directories. We've also implemented semantic versioning in planckton with version tagged docker containers which helps to get the same code state.
U: PEP8 compliant code and docstrings are ensured by using the pre-commit git hook manager to automatically lint the code with black, isort, pydocstyle. Along with jupyter notebook examples, Grits also has a sphinx readthedocs page.
E: by building on existing code we work with a community of open-source molecular simulators. <Mention Chris' work with uli and the polymer builder? The polymer builder could be a great way to entend planckton>

